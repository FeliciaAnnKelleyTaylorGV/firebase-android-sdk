// Adapted from http://google3/google/internal/firebase/firematdata/v0/data_service.proto;rcl=568574236

// API protos for the FireMAT Private API DataService.

syntax = "proto3";

package google.internal.firebase.firemat.v0;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service DataService {
  // REST API for executing a single pre-defined query.
  // Use `operationSets/*/revisions/latest` to reference the most recent
  // revision.
  rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse) {
    option (google.api.http) = {
      post: "/v0/{name=projects/*/locations/*/services/*/operationSets/*/revisions/*}:executeQuery"
      body: "*"
    };
  }

  // REST API for executing a single pre-defined mutation.
  // Use `operationSets/*/revisions/latest` to reference the most recent
  // revision.
  rpc ExecuteMutation(ExecuteMutationRequest)
      returns (ExecuteMutationResponse) {
    option (google.api.http) = {
      post: "/v0/{name=projects/*/locations/*/services/*/operationSets/*/revisions/*}:executeMutation"
      body: "*"
    };
  }

  // Admin access for executing GQL queries and mutations.
  rpc ExecuteGraphql(GraphqlRequest) returns (GraphqlResult) {
    option (google.api.http) = {
      post: "/v0/{name=projects/*/locations/*/services/*}:executeGraphql"
      body: "*"
    };
  }

  // Admin access for executing GQL queries.
  rpc ExecuteGraphqlRead(GraphqlRequest) returns (GraphqlResult) {
    option (google.api.http) = {
      post: "/v0/{name=projects/*/locations/*/services/*}:executeGraphqlRead"
      body: "*"
    };
  }
}

message ExecuteQueryRequest {
  // The resource name of the operation set revision that contains the query to
  // execute, in the format:
  // ```
  // projects/{project}/locations/{location}/services/{service}/operationSets/{operation_set}/revisions/{revision}
  // ```
  // This is left empty when it is within StreamRequest.
  string name = 1;

  // The name of the GraphQL operation. See
  // https://graphql.org/learn/queries/#operation-name for more context.
  string operation_name = 2;

  // Arbitrary JSON parameters (GraphQL variables) for the operation.
  google.protobuf.Struct variables = 3;

  // The raw SQL to execute, along with necessary configuration for connecting
  // to the Cloud SQL instance. This option is only intended for the private
  // API, for testing purposes, and will be removed for launch. If this is
  // specified, the resource name in the field `revision` is ignored.
  SqlStatement sql_statement = 4;
}

message ExecuteMutationRequest {
  // The resource name of the operation set revision that contains the mutation
  // to execute, in the format:
  // ```
  // projects/{project}/locations/{location}/services/{service}/operationSets/{operation_set}/revisions/{revision}
  // ```
  // This is left empty when it is within StreamRequest.
  string name = 1;

  // The name of the GraphQL operation. See
  // https://graphql.org/learn/queries/#operation-name for more context.
  string operation_name = 2;

  // Arbitrary JSON parameters (GraphQL variables) for the operation.
  google.protobuf.Struct variables = 3;

  // The raw SQL to execute, along with necessary configuration for connecting
  // to the Cloud SQL instance. This option is only intended for the private
  // API, for testing purposes, and will be removed for launch. If this is
  // specified, the resource name in the field `revision` is ignored.
  SqlStatement sql_statement = 4;
}

message GraphqlRequest {
  // The FireMAT instance name, in the format:
  // ```
  // projects/{project}/locations/{location}/services/{service}
  // ```
  string name = 1;

  // Values for GraphQL variables defined in the request.
  google.protobuf.Struct variables = 3;

  // Auth token JSON for impersonation. Bypass `@auth` if left empty.
  google.protobuf.Struct auth = 4;

  // The name of the GraphQL operation. See
  // https://graphql.org/learn/queries/#operation-name for more context.
  string operation_name = 5;

  // For an arbitrary query, specify `query`. See
  // ​​https://graphql.org/learn/serving-over-http/.
  // For a predefined query, specify `operation_set`.
  oneof query_type {
    string query = 2;

    // Scope to the surface storing pre-defined GQLs.
    // <name> for the latest revision
    // <name>/revisions/<revision> otherwise
    string operation_set = 6;
  }
}

message ExecuteQueryResponse {
  google.protobuf.Struct data = 1;
  repeated GraphqlError errors = 2;
}

message ExecuteMutationResponse {
  google.protobuf.Struct data = 1;
  repeated GraphqlError errors = 2;
}

message GraphqlResult {
  google.protobuf.Struct data = 1;
  repeated GraphqlError errors = 2;
}

// Similar to cs/google3/java/com/google/cloud/boq/graphql/graphql.proto
// See https://spec.graphql.org/October2021/#sec-Errors
message GraphqlError {
  // Description of the error, intended for the developer.
  string message = 1;

  // The location in the query where the error occurred.
  repeated SourceLocation locations = 2;

  // The result field which could not be populated due to error.
  google.protobuf.ListValue path = 3;

  // Additional error information in error extensions.
  GraphqlErrorExtensions extensions = 6;
}

message SourceLocation {
  int32 line = 1;
  int32 column = 2;
}

// An error that occurred while executing a GraphQL query.
message GraphqlErrorExtensions {
  string file = 1;
}

// The below three protos are intended ONLY for the private v0 API. For launch,
// configuration related to Cloud SQL connections will be stored and updated as
// part of the FireMAT control plane.

// The SQL statement to be run against the specified Cloud SQL instance.
message SqlStatement {
  CloudSqlConnection connection = 1;
  string sql = 2;
}

// Configuration information for connecting to the Cloud SQL instance.
message CloudSqlConnection {
  enum DatabaseType {
    DATABASE_TYPE_UNSPECIFIED = 0;
    POSTGRES = 1;
    MYSQL = 2;
  }
  DatabaseType type = 1;

  // The name of the Cloud SQL instance, in the format:
  // ```
  // <project_id>:<region>:<instance>
  // ```
  // For example: firebase-staging:us-central1:postgres
  string instance = 2;

  // The name of the database.
  string database = 3;

  // The credentials for accessing the Cloud SQL database.
  CloudSqlCredential credentials = 4;
}

// Credential info for the Cloud SQL instance.
message CloudSqlCredential {
  string username = 1;
  string password = 2;
}
