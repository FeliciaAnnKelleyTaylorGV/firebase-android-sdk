# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

mutation createPrimitive($data: Primitive_Data! @pick(fields: ["id", "idFieldNullable", "intField", "intFieldNullable", "floatField", "floatFieldNullable", "booleanField", "booleanFieldNullable", "stringField", "stringFieldNullable"])) @auth(is: PUBLIC) {
  primitive_insert(data: $data)
}

mutation deletePrimitive($id: ID!) @auth(is: PUBLIC) {
  primitive_delete(id: $id)
}

mutation updateIntField($id: ID!, $data: Primitive_Data! @pick(fields: ["intField"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateIntFieldNullable($id: ID!, $data: Primitive_Data! @pick(fields: ["intFieldNullable"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateFloatField($id: ID!, $data: Primitive_Data! @pick(fields: ["floatField"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateFloatFieldNullable($id: ID!, $data: Primitive_Data! @pick(fields: ["floatFieldNullable"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateBooleanField($id: ID!, $data: Primitive_Data! @pick(fields: ["booleanField"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateBooleanFieldNullable($id: ID!, $data: Primitive_Data! @pick(fields: ["booleanFieldNullable"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateStringField($id: ID!, $data: Primitive_Data! @pick(fields: ["stringField"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

mutation updateStringFieldNullable($id: ID!, $data: Primitive_Data! @pick(fields: ["stringFieldNullable"])) @auth(is: PUBLIC) {
  primitive_update(id: $id, data: $data)
}

query getPrimitive($id: ID!) @auth(is: PUBLIC) {
  primitive(id: $id) {
    id
    idFieldNullable
    intField
    intFieldNullable
    floatField
    floatFieldNullable
    booleanField
    booleanFieldNullable
    stringField
    stringFieldNullable
  }
}

query getAllPrimitives @auth(is: PUBLIC) {
  primitives {
    id
    idFieldNullable
    intField
    intFieldNullable
    floatField
    floatFieldNullable
    booleanField
    booleanFieldNullable
    stringField
    stringFieldNullable
  }
}
