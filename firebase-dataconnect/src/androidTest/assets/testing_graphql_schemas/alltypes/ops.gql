# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

mutation createPrimitive($data: Primitive_Data! @pick(fields: ["id", "idFieldNullable", "intField", "intFieldNullable", "floatField", "floatFieldNullable", "booleanField", "booleanFieldNullable", "stringField", "stringFieldNullable"])) @auth(is: PUBLIC) {
  primitive_insert(data: $data)
}

query getPrimitive($id: ID!) @auth(is: PUBLIC) {
  primitive(id: $id) {
    id
    idFieldNullable
    intField
    intFieldNullable
    floatField
    floatFieldNullable
    booleanField
    booleanFieldNullable
    stringField
    stringFieldNullable
  }
}

mutation createPrimitiveList($data: PrimitiveList_Data! @pick(fields: ["id", "idListNullable", "intList", "intListNullable", "floatList", "floatListNullable", "booleanList", "booleanListNullable", "stringList", "stringListNullable"])) @auth(is: PUBLIC) {
  primitiveList_insert(data: $data)
}

query getPrimitiveList($id: ID!) @auth(is: PUBLIC) {
  primitiveList(id: $id) {
    id
    idListNullable
    intList
    intListNullable
    floatList
    floatListNullable
    booleanList
    booleanListNullable
    stringList
    stringListNullable
  }
}

query getAllPrimitiveLists @auth(is: PUBLIC) {
  primitiveLists {
    id
    idListNullable
    intList
    intListNullable
    floatList
    floatListNullable
    booleanList
    booleanListNullable
    stringList
    stringListNullable
  }
}

mutation createFarmer($data: Farmer_Data! @pick(fields: ["id", "name", "parentId"])) @auth(is: PUBLIC) {
  farmer_insert(data: $data)
}

mutation createAnimal($data: Animal_Data! @pick(fields: ["id", "farmId", "name", "species", "age"])) @auth(is: PUBLIC) {
  animal_insert(data: $data)
}

mutation createFarm($data: Farm_Data! @pick(fields: ["id", "name", "farmerId"])) @auth(is: PUBLIC) {
  farm_insert(data: $data)
}

query getFarm($id: ID!) @auth(is: PUBLIC) {
  farm(id: $id) {
    id
    name
    farmer {
      id
      name
      parent {
        id
        name
        parentId
      }
    }
    animals: animals_as_farm {
      id
      name
      species
      age
    }
  }
}