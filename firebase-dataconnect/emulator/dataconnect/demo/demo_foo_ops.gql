mutation InsertFoo($id: String!, $bar: String)
    @auth(level: PUBLIC) {
  foo_insert(data: {id: $id, bar: $bar})
}

mutation UpsertFoo($id: String!, $bar: String)
    @auth(level: PUBLIC) {
  foo_upsert(data: {id: $id, bar: $bar})
}

mutation DeleteFoo($id: String!)
    @auth(level: PUBLIC) {
  foo_delete(id: $id)
}

mutation DeleteFoosByBar($bar: String!)
    @auth(level: PUBLIC) {
  foo_deleteMany(where: {bar: {eq: $bar}})
}

mutation UpdateFoo($id: String!, $newBar: String)
    @auth(level: PUBLIC) {
  foo_update(id: $id, data: {bar: $newBar})
}

mutation UpdateFoosByBar($oldBar: String, $newBar: String)
    @auth(level: PUBLIC) {
  foo_updateMany(where: {bar: {eq: $oldBar}}, update: {bar: {set: $newBar}})
}

query GetFooById($id: String!)
    @auth(level: PUBLIC) {
  foo(id: $id) {
    bar
  }
}

query GetFoosByBar($bar: String)
    @auth(level: PUBLIC) {
  foos(where: {bar: {eq: $bar}}) {
    id
  }
}

# This is an example mutation that has no variables, for testing purposes.
mutation UpsertHardcodedFoo
    @auth(level: PUBLIC) {
  foo_upsert(data: {id: "18e61f0a-8abc-4b18-9c4c-28c2f4e82c8f", bar: "BAR"})
}

# This is an example query that has no variables, for testing purposes.
query GetHardcodedFoo
    @auth(level: PUBLIC) {
  foo(id: "18e61f0a-8abc-4b18-9c4c-28c2f4e82c8f") {
    bar
  }
}
