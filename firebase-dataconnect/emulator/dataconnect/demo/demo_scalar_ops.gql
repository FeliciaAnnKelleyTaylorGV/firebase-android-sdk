mutation InsertStringVariants(
  $id: String!,
  $nonNullWithNonEmptyValue: String!,
  $nonNullWithEmptyValue: String!,
  $nullableWithNullValue: String,
  $nullableWithNonNullValue: String,
  $nullableWithEmptyValue: String,
  $emptyList: [String!],
  $nonEmptyList: [String!]
) @auth(level: PUBLIC) {
  stringVariants_insert(data: {
    id: $id,
    nonNullWithNonEmptyValue: $nonNullWithNonEmptyValue,
    nonNullWithEmptyValue: $nonNullWithEmptyValue,
    nullableWithNullValue: $nullableWithNullValue,
    nullableWithNonNullValue: $nullableWithNonNullValue,
    nullableWithEmptyValue: $nullableWithEmptyValue,
    emptyList: $emptyList,
    nonEmptyList: $nonEmptyList
  })
}

query GetStringVariantsById($id: String!) @auth(level: PUBLIC) {
  stringVariants(id: $id) {
    nonNullWithNonEmptyValue
    nonNullWithEmptyValue
    nullableWithNullValue
    nullableWithNonNullValue
    nullableWithEmptyValue
    emptyList
    nonEmptyList
  }
}

mutation InsertInt64Variants(
  $id: String!,
  $nonNullWithZeroValue: Int64!,
  $nonNullWithPositiveValue: Int64!,
  $nonNullWithNegativeValue: Int64!,
  $nonNullWithMaxValue: Int64!,
  $nonNullWithMinValue: Int64!,
  $nullableWithNullValue: Int64,
  $nullableWithZeroValue: Int64,
  $nullableWithPositiveValue: Int64,
  $nullableWithNegativeValue: Int64,
  $nullableWithMaxValue: Int64,
  $nullableWithMinValue: Int64,
  $emptyList: [Int64!],
  $nonEmptyList: [Int64!]
) @auth(level: PUBLIC) {
  int64Variants_insert(data: {
    id: $id,
    nonNullWithZeroValue: $nonNullWithZeroValue,
    nonNullWithPositiveValue: $nonNullWithPositiveValue,
    nonNullWithNegativeValue: $nonNullWithNegativeValue,
    nonNullWithMaxValue: $nonNullWithMaxValue,
    nonNullWithMinValue: $nonNullWithMinValue,
    nullableWithNullValue: $nullableWithNullValue,
    nullableWithZeroValue: $nullableWithZeroValue,
    nullableWithPositiveValue: $nullableWithPositiveValue,
    nullableWithNegativeValue: $nullableWithNegativeValue,
    nullableWithMaxValue: $nullableWithMaxValue,
    nullableWithMinValue: $nullableWithMinValue,
    emptyList: $emptyList,
    nonEmptyList: $nonEmptyList
  })
}

query GetInt64VariantsById($id: String!) @auth(level: PUBLIC) {
  int64Variants(id: $id) {
    nonNullWithZeroValue
    nonNullWithPositiveValue
    nonNullWithNegativeValue
    nonNullWithMaxValue
    nonNullWithMinValue
    nullableWithNullValue
    nullableWithZeroValue
    nullableWithPositiveValue
    nullableWithNegativeValue
    nullableWithMaxValue
    nullableWithMinValue
    emptyList
    nonEmptyList
  }
}

mutation InsertUUIDVariants(
  $id: String!,
  $nonNullValue: UUID!,
  $nullableWithNullValue: UUID,
  $nullableWithNonNullValue: UUID,
  $emptyList: [UUID!],
  $nonEmptyList: [UUID!]
) @auth(level: PUBLIC) {
  uUIDVariants_insert(data: {
    id: $id,
    nonNullValue: $nonNullValue,
    nullableWithNullValue: $nullableWithNullValue,
    nullableWithNonNullValue: $nullableWithNonNullValue,
    emptyList: $emptyList,
    nonEmptyList: $nonEmptyList
  })
}

query GetUUIDVariantsById($id: String!) @auth(level: PUBLIC) {
  uUIDVariants(id: $id) {
    nonNullValue
    nullableWithNullValue
    nullableWithNonNullValue
    emptyList
    nonEmptyList
  }
}

mutation InsertDateVariants(
  $id: String!,
  $nonNullValue: Date!,
  $nullableWithNullValue: Date,
  $nullableWithNonNullValue: Date,
  $minValue: Date!,
  $maxValue: Date!,
  $emptyList: [Date!],
  $nonEmptyList: [Date!]
) @auth(level: PUBLIC) {
  dateVariants_insert(data: {
    id: $id,
    nonNullValue: $nonNullValue,
    nullableWithNullValue: $nullableWithNullValue,
    nullableWithNonNullValue: $nullableWithNonNullValue,
    minValue: $minValue,
    maxValue: $maxValue,
    emptyList: $emptyList,
    nonEmptyList: $nonEmptyList
  })
}

query GetDateVariantsById($id: String!) @auth(level: PUBLIC) {
  dateVariants(id: $id) {
    nonNullValue
    nullableWithNullValue
    nullableWithNonNullValue
    minValue
    maxValue
    emptyList
    nonEmptyList
  }
}

mutation InsertSyntheticId($value: String!) @auth(level: PUBLIC) {
  syntheticId_insert(data: { value: $value })
}

query GetSyntheticIdById($id: UUID!) @auth(level: PUBLIC) {
  syntheticId(id: $id) { id value }
}
