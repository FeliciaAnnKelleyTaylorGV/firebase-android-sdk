type Foo @table {
  id: String!
  bar: String
}

type StringVariants @table {
  id: String!
  nonNullWithNonEmptyValue: String!
  nonNullWithEmptyValue: String!
  nullableWithNullValue: String
  nullableWithNonNullValue: String
  nullableWithEmptyValue: String
  emptyList: [String!]
  nonEmptyList: [String!]
}

type Int64Variants @table {
  id: String!
  nonNullWithZeroValue: Int64!
  nonNullWithPositiveValue: Int64!
  nonNullWithNegativeValue: Int64!
  nonNullWithMaxValue: Int64!
  nonNullWithMinValue: Int64!
  nullableWithNullValue: Int64
  nullableWithZeroValue: Int64
  nullableWithPositiveValue: Int64
  nullableWithNegativeValue: Int64
  nullableWithMaxValue: Int64
  nullableWithMinValue: Int64
  emptyList: [Int64!]
  nonEmptyList: [Int64!]
}

type UUIDVariants @table {
  id: String!
  nonNullValue: UUID!
  nullableWithNullValue: UUID
  nullableWithNonNullValue: UUID
  emptyList: [UUID!]
  nonEmptyList: [UUID!]
}

type DateVariants @table {
  id: String!
  nonNullValue: Date!
  nullableWithNullValue: Date
  nullableWithNonNullValue: Date
  minValue: Date
  maxValue: Date
  nonZeroTime: Date
  emptyList: [Date!]
  nonEmptyList: [Date!]
}

type TimestampVariants @table {
  id: String!
  nonNullValue: Timestamp!
  nullableWithNullValue: Timestamp
  nullableWithNonNullValue: Timestamp
  minValue: Timestamp
  maxValue: Timestamp
  emptyList: [Timestamp!]
  nonEmptyList: [Timestamp!]
}

type SyntheticId @table {
  value: String!
}

type PrimaryKeyIsString @table {
  id: String!
  value: String!
}

type PrimaryKeyIsInt @table(key: ["foo"]) {
  foo: Int!
  value: String!
}

type PrimaryKeyIsFloat @table(key: ["foo"]) {
  foo: Float!
  value: String!
}

type PrimaryKeyIsUUID @table {
  id: UUID!
  value: String!
}

type PrimaryKeyIsDate @table(key: ["foo"]) {
  foo: Date!
  value: String!
}

type PrimaryKeyIsTimestamp @table(key: ["foo"]) {
  foo: Timestamp!
  value: String!
}

type PrimaryKeyIsComposite @table(key: ["foo", "bar", "baz"]) {
  foo: Int!
  bar: String!
  baz: Boolean!
  value: String!
}

type Nested1 @table {
  value: String!
  nested1: Nested1
  nested2: Nested2!
  nested2NullableNull: Nested2
  nested2NullableNonNull: Nested2!
}

type Nested2 @table {
  value: String!
  nested3: Nested3!
  nested3NullableNull: Nested3
  nested3NullableNonNull: Nested3!
}

type Nested3 @table {
  value: String!
}
