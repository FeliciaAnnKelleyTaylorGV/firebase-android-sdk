{{- define "RefTypeParameters" -}}
    {{- if .variables }}{{ .operationName }}.Variables
    {{- else }}Unit
    {{- end -}}
    , Unit
{{- end -}}

{{- define "ConvenienceFunctionArgs" -}}
{{- if .variables -}}
    {{- range $variableName, $variableInfo := .variables -}}
        {{ $variableName }}:
        {{- if eq ($variableInfo.type) "string" -}}
            String
        {{- else -}}
            unknown
        {{- end -}},
    {{- end -}}
{{- end -}}
{{- end -}}

package {{.kotlinPackage}}

import com.google.firebase.dataconnect.*
import kotlinx.serialization.Serializable

object {{.operationName}} {

{{ if .variables }}

    @Serializable
    data class Variables(

    {{- range $variableName, $variableInfo := .variables -}}
        val {{ $variableName }}:
        {{- if eq ($variableInfo.type) "string" -}}
            String
        {{- else -}}
            unknown
        {{- end -}}
    ,
    {{- end -}}
    ) {
    }
{{ end }}

}

{{ if eq .operationType "query" }}

typealias {{ .operationName }}QueryRef = QueryRef<{{ template "RefTypeParameters" . }}>
typealias {{ .operationName }}Subscription = QuerySubscription<{{ template "RefTypeParameters" . }}>

suspend fun QueryRef<{{ template "RefTypeParameters" . }}>.execute({{ template "ConvenienceFunctionArgs" .}})
  = execute(
    {{- if .variables -}}
        variablesFor(
        {{- range $variableName, $variableInfo := .variables -}}
            {{ $variableName }}={{ $variableName }},
        {{- end -}}
        )
    {{- else -}}
        Unit
    {{- end -}}
)

fun QueryRef<{{ template "RefTypeParameters" . }}>.subscribe({{ template "ConvenienceFunctionArgs" .}})
  = subscribe(
    {{- if .variables -}}
        variablesFor(
        {{- range $variableName, $variableInfo := .variables -}}
            {{ $variableName }}={{ $variableName }},
        {{- end -}}
        )
    {{- else -}}
        Unit
    {{- end -}}
)

{{ if .variables }}
private fun variablesFor({{ template "ConvenienceFunctionArgs" .}}) = {{ .operationName }}.Variables(
    {{- range $variableName, $variableInfo := .variables -}}
        {{ $variableName }}={{ $variableName }},
    {{- end -}}
)
{{ end }}

{{ else if eq .operationType "mutation" }}

    typealias {{ .operationName }}MutationRef = MutationRef<
    {{- if .variables }}{{ .operationName }}.Variables
    {{- else }}Unit
    {{- end -}}
    , Unit>
{{ else }}
    {{ fail "unsupported operationType" }}
{{ end }}