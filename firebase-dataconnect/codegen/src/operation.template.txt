{{- define "RefTypeParameters" -}}
    {{- if .variables }}{{ .operationName }}.Variables
    {{- else }}Unit
    {{- end -}}
    , Unit
{{- end -}}

{{- define "ConvenienceFunctionArgs" -}}
{{- if .variables -}}
    {{- range $variableName, $variableInfo := .variables -}}
        {{ $variableName }}:
        {{- if eq ($variableInfo.type) "string" -}}
            String
        {{- else -}}
            {{ fail3 "unsupported variable type" $variableName $variableInfo.type }}
        {{- end -}},
    {{- end -}}
{{- end -}}
{{- end -}}

{{- define "ConvenienceFunctionForwardedArgs" -}}
    {{- if .variables -}}
        {{- .operationName -}}.Variables(
        {{- range $variableName, $variableInfo := .variables -}}
            {{ $variableName }}={{ $variableName }},
        {{- end -}}
        )
    {{- else -}}
        Unit
    {{- end -}}
{{- end -}}

{{- define "KotlinTypeFromConfigType" -}}
    {{- if eq .type "string" -}}
        String
    {{- else -}}
        {{ fail2 "unsupported variable type" .type }}
    {{- end -}}
{{- end -}}

package {{.kotlinPackage}}

import com.google.firebase.dataconnect.*
import kotlinx.serialization.Serializable

object {{.operationName}} {

{{ if .variables }}

    @Serializable
    data class Variables(

    {{- range $variableName, $variableInfo := .variables -}}
        val {{ $variableName }}: {{ template "KotlinTypeFromConfigType" $variableInfo }},
    {{- end -}}
    ) {
    }
{{ end }}

}

{{ if eq .operationType "query" }}

typealias {{ .operationName }}QueryRef = QueryRef<{{ template "RefTypeParameters" . }}>
typealias {{ .operationName }}Subscription = QuerySubscription<{{ template "RefTypeParameters" . }}>

suspend fun QueryRef<{{ template "RefTypeParameters" . -}}>.execute(
  {{- template "ConvenienceFunctionArgs" . -}}
) = execute({{- template "ConvenienceFunctionForwardedArgs" . -}})

suspend fun QueryRef<{{ template "RefTypeParameters" . -}}>.subscribe(
  {{- template "ConvenienceFunctionArgs" . -}}
) = subscribe({{- template "ConvenienceFunctionForwardedArgs" . -}})

{{ else if eq .operationType "mutation" }}

typealias {{ .operationName }}MutationRef = MutationRef<{{ template "RefTypeParameters" . }}>

suspend fun MutationRef<{{ template "RefTypeParameters" . -}}>.execute(
  {{- template "ConvenienceFunctionArgs" . -}}
) = execute({{- template "ConvenienceFunctionForwardedArgs" . -}})

{{ else }}

{{ fail2 "unsupported operationType" .operationType }}

{{ end }}