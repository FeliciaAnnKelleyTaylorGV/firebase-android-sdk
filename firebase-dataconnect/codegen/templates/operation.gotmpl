{{- /***************************************************************************
Emits the "Variables" data class definition for the graphql operation.
Argument: []*VariableDefinition The list of operation's variables.
*************************************************************************/ -}}
{{- define "VariablesClass" -}}
@Serializable data class Variables({{ template "VariablesClassConstructorParameters" . }}) {
{{ template "VariablesClassNestedClassDefinitions" . }}
}
{{- end -}}

{{- /***************************************************************************
Emits the parameter list of the "Variables" data class definition for the
graphql operation.
Argument: []*VariableDefinition The list of operation's variables.
*************************************************************************/ -}}
{{- define "VariablesClassConstructorParameters" -}}
    {{- range . -}}
        val {{ .Variable }}: {{ kotlinTypeFromGraphQLType .Type }},
    {{- end -}}
{{- end -}}

{{- /***************************************************************************
Emits the nested class definitions that should be nested inside the "Variables"
data class definition for the graphql operation.
Argument: []*VariableDefinition The list of operation's variables.
*************************************************************************/ -}}
{{- define "VariablesClassNestedClassDefinitions" -}}
  {{- range . -}}
    {{- if isScalarType .Type }}{{ continue }}{{ end -}}
    @Serializable data class {{ .Type.Name }}(
      {{- template "VariablesClassNestedClassConstructorParameters" (pickedFieldsForVariableDefinition .) -}}
    )
  {{- end -}}
{{- end -}}

{{- /***************************************************************************
Emits the constructor parameter list for a nested class definitions nested
inside the "Variables" data class definition for the graphql operation.
Argument: []*FieldDefinition The fields for the type being emitted.
*************************************************************************/ -}}
{{- define "VariablesClassNestedClassConstructorParameters" -}}
    {{- range . -}}
        val {{ .Name }}: {{ kotlinTypeFromGraphQLType .Type }},
    {{- end -}}
{{- end -}}

{{- /***************************************************************************
Emits the convenience function and typealias definitions for working with a
graphql query.
Argument: RenderOperationTemplateConfig
*************************************************************************/ -}}
{{- define "QueryConvenienceDefinitions" -}}
typealias {{ .Operation.Name }}QueryRef = QueryRef<{{ .Operation.Name }}.Variables, Unit>

typealias {{ .Operation.Name }}QuerySubscription = QuerySubscription<{{ .Operation.Name }}.Variables, Unit>

suspend fun QueryRef<{{ .Operation.Name }}.Variables, Unit>.execute(
  {{- template "ConvenienceFunctionParameters" . -}}
)
  = execute(
  {{- template "ConvenienceFunctionVariablesArguments" . -}}
)

fun QueryRef<{{ .Operation.Name }}.Variables, Unit>.subscribe(
  {{- template "ConvenienceFunctionParameters" . -}}
)
  = subscribe(
  {{- template "ConvenienceFunctionVariablesArguments" . -}}
)
{{- end -}}

{{- /***************************************************************************
Emits the convenience function and typealias definitions for working with a
graphql mutation.
Argument: RenderOperationTemplateConfig
*************************************************************************/ -}}
{{- define "MutationConvenienceDefinitions" -}}
typealias {{ .Operation.Name }}MutationRef = MutationRef<{{ .Operation.Name }}.Variables, Unit>

suspend fun MutationRef<{{ .Operation.Name }}.Variables, Unit>.execute(
  {{- template "ConvenienceFunctionParameters" . -}}
)
  = execute(
  {{- template "ConvenienceFunctionVariablesArguments" . -}}
)
{{- end -}}

{{- /***************************************************************************
Emits the parameter list for a convenience function for the graphql operation.
Argument: RenderOperationTemplateConfig
*************************************************************************/ -}}
{{- define "ConvenienceFunctionParameters" -}}
  {{- range flattenedVariablesFor .Operation .Schema -}}
  {{ .Variable }}: {{ kotlinTypeFromGraphQLType .Type }},
  {{- end -}}
{{- end -}}

{{- /***************************************************************************
Emits the code to create the Variables object from the arguments to a
convenience function for the graphql operation.
Argument: RenderOperationTemplateConfig
*************************************************************************/ -}}
{{- define "ConvenienceFunctionVariablesArguments" -}}
  {{ .Operation.Name }}.Variables(
    {{- template "ConvenienceFunctionVariablesArgumentsRecursive" createConvenienceFunctionVariablesArgumentsRecursiveArgFromConfig . -}}
  )
{{- end -}}

{{- /***************************************************************************
Helper ConvenienceFunctionVariablesArguments that emits the arguments
and calls itself recursively.
Argument: convenienceFunctionVariablesArgumentsRecursiveArg
*************************************************************************/ -}}
{{- define "ConvenienceFunctionVariablesArgumentsRecursive" -}}
  {{- $arg := . -}}
  {{- range .Fields -}}
    {{- .Field.Name -}}
    =
    {{- if isScalarType .Field.Type -}}
      {{- .Field.Name -}}
    {{- else -}}
      {{- $arg.OperationName -}}.Variables.{{- kotlinTypeFromGraphQLType .Field.Type -}}(
        {{- template "ConvenienceFunctionVariablesArgumentsRecursive" createConvenienceFunctionVariablesArgumentsRecursiveArgFromArgAndType $arg .Field.Type -}}
      )
    {{- end -}}
    ,
  {{- end -}}
{{- end -}}

package {{ .KotlinPackage }}

import com.google.firebase.dataconnect.*
import kotlinx.serialization.Serializable

object {{ .Operation.Name }} {

{{ if (gt (len .Operation.VariableDefinitions) 0) -}}
{{ template "VariablesClass" .Operation.VariableDefinitions }}
{{- end }}

}

{{ if gt (len .Operation.VariableDefinitions) 0 -}}
{{- if eq .Operation.Operation "mutation" -}}
{{ template "MutationConvenienceDefinitions" . }}
{{- else if eq .Operation.Operation "query" -}}
{{ template "QueryConvenienceDefinitions" . }}
{{- else -}}
{{ fail "unsupported value for .Operation.Operation: " .Operation.Operation }}
{{- end }}
{{- end }}
